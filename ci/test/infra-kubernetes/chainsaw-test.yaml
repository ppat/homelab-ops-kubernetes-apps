---
# Main test file for infrastructure kubernetes modules
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: infra-kubernetes
spec:
  bindings:
  - name: test_path
    value: ./ci/test/infra-kubernetes
  steps:
  # Step 1: Bootstrap FluxCD
  - try:
    # Create and apply git source
    - script:
        env:
        - name: GIT_URL
          value: ($values.git.url)
        - name: GIT_BRANCH
          value: ($values.git.branch)
        - name: TEST_PATH
          value: ($test_path)
        content: |
          echo "Creating git source for branch $GIT_BRANCH..."
          flux create source git test-source --url=$GIT_URL --branch=$GIT_BRANCH --namespace=flux-system --export | kubectl apply --server-side -f -
          echo Show git source...
          flux get source git test-source
          echo Wait for git source to be ready...
          kubectl -n flux-system wait GitRepository/test-source --for=condition=ready --timeout=1m

          echo Setting up pre-requisites...
          flux create kustomization pre-requisites --source=test-source --path=./ci/test/pre-requisites
          echo Waiting for pre-requisites to be ready...
          kubectl -n flux-system wait Kustomization/pre-requisites --for=condition=ready --timeout=1m

          echo Create kustomization for $TEST_PATH...
          flux create kustomization test-kustomization --source=test-source --path=$TEST_PATH
          echo Show kustomization...
          flux get kustomizations test-kustomization
          echo Wait for kustomization to be ready...
          kubectl -n flux-system wait Kustomization/test-kustomization --for=condition=ready --timeout=1m
    finally:
    - describe:
        apiVersion: source.toolkit.fluxcd.io/v1
        kind: GitRepository
        name: test-source
        namespace: flux-system
    - describe:
        apiVersion: kustomize.toolkit.fluxcd.io/v1
        kind: Kustomization
        name: pre-requisites
        namespace: flux-system
    - describe:
        apiVersion: kustomize.toolkit.fluxcd.io/v1
        kind: Kustomization
        name: test-kustomization
        namespace: flux-system

  # Step 2: Core Module
  - try:
    # Reconcile core module
    - command:
        entrypoint: flux
        args:
        - reconcile
        - kustomization
        - -n
        - ($values.namespaces.flux)
        - ($values.modules.core.name)
        - --timeout
        - ($values.modules.core.timeout)
    # Wait for CoreDNS
    - wait:
        apiVersion: apps/v1
        kind: Deployment
        name: ($values.resources.coredns.deployment)
        namespace: ($values.namespaces.core)
        timeout: 1m
        for:
          condition:
            name: Available
            value: "true"
    finally:
    # Debug core issues if failed
    - describe:
        apiVersion: apps/v1
        kind: Deployment
        name: ($values.resources.coredns.deployment)
        namespace: ($values.namespaces.core)
    - podLogs:
        name: ($values.resources.coredns.deployment)
        namespace: ($values.namespaces.core)

  # Step 3: Extra Module
  - try:
    # Reconcile extra module
    - command:
        entrypoint: flux
        args:
        - reconcile
        - kustomization
        - -n
        - ($values.namespaces.flux)
        - ($values.modules.extra.name)
        - --timeout
        - ($values.modules.extra.timeout)
    # Wait for NFD components
    - wait:
        apiVersion: apps/v1
        kind: Deployment
        name: ($values.resources.nfd.master)
        namespace: ($values.namespaces.core)
        timeout: 1m
        for:
          condition:
            name: Available
            value: "true"
    - assert:
        bindings:
          - name: name
            value: ($values.resources.nfd.worker)
          - name: namespace
            value: ($values.namespaces.core)
        file: ../chainsaw/templates/rollouts/daemonset.yaml
    - wait:
        apiVersion: apps/v1
        kind: Deployment
        name: ($values.resources.nfd.gc)
        namespace: ($values.namespaces.core)
        timeout: 1m
        for:
          condition:
            name: Available
            value: "true"
    # Wait for VPA
    - wait:
        apiVersion: apps/v1
        kind: Deployment
        name: ($values.resources.vpa.recommender)
        namespace: ($values.namespaces.core)
        timeout: 1m
        for:
          condition:
            name: Available
            value: "true"
    # Wait for Device Plugins
    - wait:
        apiVersion: apps/v1
        kind: Deployment
        name: ($values.resources.plugins.operator)
        namespace: ($values.namespaces.intel)
        timeout: 1m
        for:
          condition:
            name: Available
            value: "true"
    - wait:
        apiVersion: apps/v1
        kind: Deployment
        name: ($values.resources.plugins.gpu)
        namespace: ($values.namespaces.intel)
        timeout: 1m
        for:
          condition:
            name: Available
            value: "true"
    - assert:
        bindings:
          - name: name
            value: ($values.resources.plugins.generic)
          - name: namespace
            value: ($values.namespaces.core)
        file: ../chainsaw/templates/rollouts/daemonset.yaml
    # Wait for Descheduler
    - wait:
        apiVersion: apps/v1
        kind: Deployment
        name: ($values.resources.descheduler.deployment)
        namespace: ($values.namespaces.core)
        timeout: 1m
        for:
          condition:
            name: Available
            value: "true"
    finally:
    # Debug extra issues if failed
    - describe:
        apiVersion: apps/v1
        kind: DaemonSet
        name: ($values.resources.nfd.worker)
        namespace: ($values.namespaces.core)
    - podLogs:
        name: ($values.resources.nfd.worker)
        namespace: ($values.namespaces.core)
    # Clean up git source
    - delete:
        ref:
          apiVersion: source.toolkit.fluxcd.io/v1
          kind: GitRepository
          name: test-source
          namespace: ($values.namespaces.flux)
