---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jellyfin
  namespace: media
  labels:
    app.kubernetes.io/name: jellyfin
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: jellyfin
  template:
    metadata:
      labels:
        app.kubernetes.io/name: jellyfin
    spec:
      automountServiceAccountToken: false
      initContainers:
      - name: log-janitor
        image: busybox@sha256:2f590fc602ce325cbff2ccfc39499014d039546dc400ef8bbf5c6ffb860632e7
        env:
        - name: LOG_PATH
          value: "/config/log"
        - name: LOG_APP
          value: "Jellyfin"
        command:
        - "/bin/sh"
        - "-c"
        # yamllint disable-line rule:indentation
        - |
          # This script runs in a loop and clean up logs older than 1 day as log
          # ingestor is expected to have scraped them by then.
          while true; do
            echo "Running $LOG_APP log cleanup...";
            while IFS= read -r -d '' file; do
              echo "$file";
              rm -f "$file";
            done < <(find "$LOG_PATH" -path "*/lost+found" -prune -o -mtime +1 -type f -name '*.log*' -print0);
            echo;
            echo "Sleeping for 4 hrs...";
            sleep 14400;
            echo;
          done
        restartPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /config
          name: jellyfin-data
        - mountPath: "/config/log"
          name: jellyfin-logs
      containers:
      - name: jellyfin
        env:
        - name: PublishedServerUrl
          value: ${jellyfin_external_ip_address}
        image: ghcr.io/jellyfin/jellyfin:10.11.1@sha256:66f8c685241cb6d1611ddf90c593d47f18fb851d07d696b821280497f6f2b5b7
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 8096
        ports:
        - name: jellyfin
          containerPort: 8096
          protocol: TCP
        - name: auto-discovery
          containerPort: 7359
          protocol: UDP
        readinessProbe:
          httpGet:
            path: /health
            port: 8096
        resources:
          requests:
            gpu.intel.com/i915: 1
            cpu: 64m
            memory: 512Mi
          limits:
            gpu.intel.com/i915: 1
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - "ALL"
          readOnlyRootFilesystem: true
        startupProbe:
          httpGet:
            path: /health
            port: 8096
          initialDelaySeconds: 15
        volumeMounts:
        - mountPath: /config
          name: jellyfin-data
        - mountPath: /cache
          name: jellyfin-cache
        - mountPath: /data
          name: jellyfin-media
          readOnly: true
        - mountPath: "/config/log"
          name: jellyfin-logs
        - mountPath: /tmp
          name: jellyfin-temp
      nodeSelector:
        intel.feature.node.kubernetes.io/gpu: "true"
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        # fsGroup is intentionally unset to prevent changing permissions on jellyfin-media volume
        # use a kustomize overlay to update w/
        # - MEDIA_READER_GID (i.e. group w/ read access to jellyfin-media volume)
        # - TRANSCODER_DEV_GIDS (i.e. groups w/ access to /dev/dri/*)
        supplementalGroups: []
      volumes:
      - name: jellyfin-data
        persistentVolumeClaim:
          claimName: jellyfin-data
      - name: jellyfin-cache
        emptyDir: {}
      - name: jellyfin-media
        persistentVolumeClaim:
          claimName: media-read-only
      - name: jellyfin-logs
        persistentVolumeClaim:
          claimName: jellyfin-logs
      - name: jellyfin-temp
        emptyDir:
          sizeLimit: 256Mi
