---
# yamllint disable rule:line-length
name: validate-kubernetes-manifests

on:
  pull_request:
    paths:
    - '.github/workflows/validate-kubernetes-manifests.yaml'
    - 'apps/**/*.yaml'
    - 'ci/**/*.yaml'
    - 'infrastructure/**/*.yaml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  FLUX_SCHEMA_DIR: /tmp/flux-crd-schemas/master-standalone-strict
jobs:
  validate:
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        fetch-depth: 0

    - name: Setup kubeconform
      uses: fluxcd/pkg/actions/kubeconform@7317f5733333a364a26829208cb02d3423c2f361
      with:
        # renovate: datasource=github-releases depName=yannh/kubeconform
        version: "v0.6.7"

    - name: Setup kustomize
      uses: fluxcd/pkg/actions/kustomize@7317f5733333a364a26829208cb02d3423c2f361
      with:
        # renovate: datasource=github-releases depName=kubernetes-sigs/kustomize extractVersion=^kustomize/(?<version>.*)$
        version: "v5.5.0"

    - name: Setup flux
      uses: fluxcd/flux2/action@5350425cdcd5fa015337e09fa502153c0275bd4b # v2.4.0
      with:
        # renovate: datasource=github-releases depName=fluxcd/flux2
        version: "v2.4.0"

    - name: Downloading Flux OpenAPI schemas
      shell: bash
      env:
        # renovate: datasource=github-releases depName=fluxcd/flux2
        version: "v2.4.0"
      run: |
        set -x
        wget --progress=dot:giga -c https://github.com/fluxcd/flux2/releases/download/${version}/crd-schemas.tar.gz -O /tmp/crd-schemas.tar.gz
        mkdir -p ${FLUX_SCHEMA_DIR}
        cd ${FLUX_SCHEMA_DIR}
        tar -xzvf /tmp/crd-schemas.tar.gz

    # based on https://github.com/fluxcd/flux2-kustomize-helm-example/blob/main/scripts/validate.sh
    - name: Validate manifests
      shell: bash
      # yamllint disable-line rule:indentation
      run: |
        # mirror kustomize-controller build options
        kustomize_flags=("--load-restrictor=LoadRestrictionsNone")

        # skip Kubernetes Secrets due to SOPS fields failing validation
        kubeconform_flags=("-skip=Secret,IPAddressPool")
        kubeconform_config=("-strict" "-ignore-missing-schemas" "-schema-location" "default" "-schema-location" "/tmp/flux-crd-schemas" -schema-location 'https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json' "-verbose")

        echo -----------------------------------------------------------------------
        echo "--> Validating kustomizations (pre-build)"
        find . -type f -name kustomization.yaml -print0 | while IFS= read -r -d $'\0' file; do
          kubeconform "${kubeconform_flags[@]}" "${kubeconform_config[@]}" "${file}" | pr -t -o 6
          if [[ ${PIPESTATUS[0]} != 0 ]]; then
            exit 1
          fi
        done
        echo -----------------------------------------------------------------------
        echo "--> Prepare for post-build kustomizations..."
        echo "        Setting up environment variables for envsubst..."
        set -o allexport
        source ./ci/validation/.env
        set +o allexport
        echo "        Creating wrapper kustomization..."
        kustomize create
        echo "        Gathering patches for the wrapper kustomization..."
        find ./ci/validation/patches/ -type f -name '*.yaml' -print0 | while IFS= read -r -d $'\0' patch_file; do
          patch_filename="$(basename $patch_file)"
          target_kind="$(echo ${patch_filename%.*} | cut -d'_' -f1)"
          target_name_prefix="$(echo ${patch_filename%.*} | cut -d'_' -f2)"
          kustomize edit add patch --path $patch_file --kind $target_kind --name "$target_name_prefix.*"
          echo "          $target_kind/$target_name_prefix"
        done
        echo -----------------------------------------------------------------------
        echo "--> Validating kustomiztions (post-build)"
        find . -mindepth 3 -type f -name kustomization.yaml -print | sort | grep -E -v '(infrastructure/bootstrap|ci/test/pre-requisites)' > /tmp/kustomizations
        while read -r file; do
          kustomization="${file/%kustomization.yaml}"
          echo "      kustomization: $kustomization"
          kustomize edit add resource $kustomization
          kustomize build . "${kustomize_flags[@]}" | \
            flux envsubst | \
            kubeconform "${kubeconform_flags[@]}" "${kubeconform_config[@]}" | \
            pr -t -o 8
          if [[ ${PIPESTATUS[0]} != 0 ]]; then
            exit 1
          fi
          kustomize edit remove resource $kustomization
        done < /tmp/kustomizations
        echo -----------------------------------------------------------------------
