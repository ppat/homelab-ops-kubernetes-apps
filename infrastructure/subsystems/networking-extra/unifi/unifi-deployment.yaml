---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: unifi-network-application
  namespace: unifi
  labels:
    app.kubernetes.io/name: unifi-network-application
    app.kubernetes.io/part-of: unifi
    app.kubernetes.io/component: application
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: unifi-network-application
      app.kubernetes.io/part-of: unifi
      app.kubernetes.io/component: application
  template:
    metadata:
      labels:
        app.kubernetes.io/name: unifi-network-application
        app.kubernetes.io/part-of: unifi
        app.kubernetes.io/component: application
    spec:
      automountServiceAccountToken: false
      initContainers:
      - name: log-janitor
        image: busybox@sha256:f9a104fddb33220ec80fc45a4e606c74aadf1ef7a3832eb0b05be9e90cd61f5f
        env:
        - name: LOG_PATH
          value: "/config/logs"
        - name: LOG_APP
          value: "unifi"
        command:
        - "/bin/sh"
        - "-c"
        # yamllint disable-line rule:indentation
        - |
          # This script runs in a loop and clean up logs older than 1 day as log
          # ingestor is expected to have scraped them by then.
          while true; do
            echo "Running $LOG_APP log cleanup...";
            while IFS= read -r -d '' file; do
              echo "$file";
              rm -f "$file";
            done < <(find "$LOG_PATH" -path "*/lost+found" -prune -o -mtime +1 -type f -name '*.log*' -print0);
            echo;
            echo "Sleeping for 4 hrs...";
            sleep 14400;
            echo;
          done
        restartPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 5000
          runAsGroup: 5000
        volumeMounts:
        - name: unifi-logs
          mountPath: /config/logs
      containers:
      - name: unifi
        env:
        - name: PUID
          value: "5000"
        - name: PGID
          value: "5000"
        - name: TZ
          value: Etc/UTC
        - name: MONGO_USER
          valueFrom:
            secretKeyRef:
              key: unifi_db_user
              name: unifi-secrets
              optional: false
        - name: MONGO_PASS
          valueFrom:
            secretKeyRef:
              key: unifi_db_password
              name: unifi-secrets
              optional: false
        - name: MONGO_HOST
          value: unifi-db.unifi.svc.cluster.local
        - name: MONGO_PORT
          value: "27017"
        - name: MONGO_DBNAME
          value: unifi
        - name: MEM_LIMIT
          value: "1024"
        - name: MEM_STARTUP
          value: "1024"
        - name: MONGO_TLS
          value: ""
        - name: MONGO_AUTHSOURCE
          value: ""
        image: ghcr.io/linuxserver/unifi-network-application:9.1.120@sha256:304bb6bd0005861527719ef4a62cb1b756a64db3a800a0100680060f21a2c29b
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /status
            port: https-gui-api
            scheme: HTTPS
          periodSeconds: 15
        ports:
        - name: dns-tcp
          containerPort: 53
          protocol: TCP
        - name: dns-udp
          containerPort: 53
          protocol: UDP
        - name: ntp
          containerPort: 123
          protocol: UDP
        # used to "Make application discoverable on L2 network" in the UniFi Network settings
        - name: l2-discovery
          containerPort: 1900
          protocol: UDP
        - name: stun
          containerPort: 3478
          protocol: UDP
        - name: remote-syslog
          containerPort: 5514
          protocol: UDP
        - name: speedtest
          containerPort: 6789
          protocol: TCP
        # unifi network devices communicate w/ unifi network controller (device adoption, etc) on this port
        - name: dvc-comms
          containerPort: 8080
          protocol: TCP
        # web ui + api
        - name: https-gui-api
          containerPort: 8443
          protocol: TCP
        # - name: captive-portal-https
        #   containerPort: 8843
        #   protocol: TCP
        # - name: captive-portal-http
        #   containerPort: 8880
        #   protocol: TCP
        - name: dvc-discovery
          containerPort: 10001
          protocol: UDP
        readinessProbe:
          httpGet:
            path: /status
            port: https-gui-api
            scheme: HTTPS
          periodSeconds: 15
        startupProbe:
          httpGet:
            path: /status
            port: https-gui-api
            scheme: HTTPS
          failureThreshold: 24
          initialDelaySeconds: 15
          periodSeconds: 5
        volumeMounts:
        - name: unifi-data
          mountPath: /config/data
        - name: unifi-logs
          mountPath: /config/logs
        - name: unifi-backups
          mountPath: /config/data/firmware
          subPath: firmware
        - name: unifi-backups
          mountPath: /config/data/backup
          subPath: backup
      volumes:
      - name: unifi-data
        persistentVolumeClaim:
          claimName: unifi-data
      - name: unifi-logs
        # unifi writes logs to multiple different log files:
        #     access.log   inform_request.log  server.log   state.log
        #     hotspot.log  migration.log       startup.log  tasks.lo
        # these are not written to stdout, so we are placing them on a separate pvc that
        # can be scraped by the log ingestor
        persistentVolumeClaim:
          claimName: unifi-logs
      - name: unifi-backups
        persistentVolumeClaim:
          claimName: unifi-backups
